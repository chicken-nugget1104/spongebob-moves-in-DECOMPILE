using System;
using UnityEngine;

// Token: 0x0200035F RID: 863
internal class SoaringGenerateUserModule : SoaringModule
{
	// Token: 0x060018B2 RID: 6322 RVA: 0x000A35E8 File Offset: 0x000A17E8
	public override string ModuleName()
	{
		return "retrieveNextAutogeneratedUserTag";
	}

	// Token: 0x060018B3 RID: 6323 RVA: 0x000A35F0 File Offset: 0x000A17F0
	public override void CallModule(SoaringDictionary data, SoaringDictionary callData, SoaringContext context)
	{
		SoaringDictionary data2 = SCQueueTools.CreateMessage(this.ModuleName(), data.soaringValue("gameId"), null);
		base.PushCorePostDataToQueue(data2, 0, context, true);
	}

	// Token: 0x060018B4 RID: 6324 RVA: 0x000A3624 File Offset: 0x000A1824
	protected override bool Web_Callback(SCWebQueue.SCWebQueueState state, SoaringError error, object userData, object data)
	{
		if (state == SCWebQueue.SCWebQueueState.Updated)
		{
			return true;
		}
		SoaringModule.SoaringModuleData soaringModuleData = base.CreateModuleData();
		try
		{
			SoaringDictionary soaringDictionary = null;
			if (error == null)
			{
				error = SCQueueTools.CheckAndHandleError((string)data, ref soaringDictionary);
				if (error != null || soaringDictionary == null)
				{
					state = SCWebQueue.SCWebQueueState.Failed;
				}
				else
				{
					soaringDictionary = this.DecryptCall(soaringDictionary);
				}
			}
			SoaringDebug.Log((string)data);
			if (state == SCWebQueue.SCWebQueueState.Finished)
			{
				soaringDictionary = (SoaringDictionary)soaringDictionary.objectWithKey("data");
				SoaringDictionary soaringDictionary2 = new SoaringDictionary();
				soaringDictionary2.addValue(soaringDictionary.objectWithKey("nextTag"), "nextTag");
				SoaringInternal.instance.UpdatePlayerData(soaringDictionary2, true);
				this.HandleDelegateCallback(soaringModuleData.Set(true, null, soaringDictionary, (SoaringContext)userData));
			}
			else if (state == SCWebQueue.SCWebQueueState.Failed)
			{
				this.HandleDelegateCallback(soaringModuleData.Set(false, error, null, (SoaringContext)userData));
			}
		}
		catch (Exception ex)
		{
			SoaringDebug.Log("SoaringModule:" + this.ModuleName() + ": Error: " + ex.Message, LogType.Warning);
			state = SCWebQueue.SCWebQueueState.Failed;
			this.HandleDelegateCallback(soaringModuleData.Set(false, ex.Message, null, (SoaringContext)userData));
		}
		base.ReturnModuledata(soaringModuleData);
		return state == SCWebQueue.SCWebQueueState.Finished;
	}

	// Token: 0x060018B5 RID: 6325 RVA: 0x000A376C File Offset: 0x000A196C
	public override void HandleDelegateCallback(SoaringModule.SoaringModuleData moduleData)
	{
		string text = null;
		string text2 = null;
		string platformID = null;
		SoaringLoginType type = SoaringLoginType.Soaring;
		if (moduleData.data != null)
		{
			text2 = moduleData.data.soaringValue("nextTag");
			if (moduleData.context != null)
			{
				SoaringDictionary soaringDictionary = (SoaringDictionary)moduleData.context.objectWithKey("tregister");
				if (soaringDictionary != null)
				{
					int num = soaringDictionary.soaringValue("loginType");
					type = (SoaringLoginType)num;
					text = soaringDictionary.soaringValue("password");
					string key = SoaringInternal.instance.PlatformKeyWithLoginType(type, true);
					platformID = soaringDictionary.soaringValue(key);
				}
			}
		}
		if (string.IsNullOrEmpty(text))
		{
			SoaringInternal.Delegate.OnGenerateUserName(moduleData.state, moduleData.error, text2, moduleData.context);
		}
		else if (moduleData.state)
		{
			SoaringInternal.instance.RegisterUser(text2, text, platformID, true, type, true, moduleData.context);
		}
		else
		{
			SoaringInternal.instance.HandleLogin(SoaringLoginType.Soaring, moduleData.state, moduleData.error, moduleData.data, moduleData.context);
		}
	}
}
